

// Завдання: 7

/**
 * Функція `removeDuplicatesInPlace` видаляє дублікати з масиву без створення нового масиву.
 * arr - Масив, з якого потрібно видалити дублікати.
 */
function removeDuplicatesInPlace(arr) {
  // Створення множини для збереження унікальних елементів
  // Перебір елементів масиву за допомогою циклу for від 0 до довжини масиву
  // Перевірка, чи елемент вже присутній у множині
  // Якщо елемент вже є унікальним, видаляємо його з масиву
  // Зменшуємо лічильник, оскільки масив став коротшим
  // Додаємо унікальний елемент до множини
  // Повертаємо множину
}

// Приклад використання функції removeDuplicatesInPlace
console.log("Завдання: 7 ==============================");

console.log(removeDuplicatesInPlace([1, 2, 2, 3, 3, 4, 5, 5]));
// Виведе: Set(5) { 1, 2, 3, 4, 5 }









// Завдання: 12

/**
 * Функція `sumNumbers` рахує суму всіх числових елементів у множині.
 * set - Множина, у якій потрібно порахувати суму чисел.
 * Повертаємо - Суму числових елементів у множині.
 */
function sumNumbers(set) {

  
  // Використання методу forEach для перебору елементів множини
  set.forEach((element) => {
    // Перевірка, чи є елемент числом
    if(typeof element === number) {
      // Додавання числового елемента до суми
      return sum = set.add(element);
    }
  })
  

  // Повертаємо суму
  return sum;
}

// Приклад використання функції sumNumbers
console.log("Завдання: 12 ==============================");
console.log(
  "Сума чисел у множині:",
  sumNumbers(new Set([1, 2, "a", 3, "b", 4, 5]))
);
// Виведе: Сума чисел у множині: 15


function getIntersection(arr1, arr2) {
  // Створення множин з двох масивів
  const set1 = new Set(arr1);
  const set2 = new Set(arr2);
  // Створення множини intersectionSet
  const intersectionSet = new Set();
  // Перебір елементів першої множини за допомогою оператору for of
  for (const element of set1) {
  // Перевірка, чи елемент є спільним у другій множині
    if (set2.has(element)) {
  // Додавання спільного елементу до множини intersectionSet
      intersectionSet.add(element);
    }
  } 
  // Повертаємо множину intersectionSet
  return intersectionSet;}